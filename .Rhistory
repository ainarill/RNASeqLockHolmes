smoothScatter(A, M, main=samplename, las=1)
abline(h=0, col="blue", lwd=2)
lo <- lowess(M ~ A)
lines(lo$x, lo$y, col="red", lwd=2)
}
par(mfrow=c(15, 3), mar=c(4, 5, 3, 1))
setmp <- coadse.filt[, coadse.filt$type == "tumor"]
dgetmp <- dge.filt[, coadse.filt$type == "tumor"]
numb <- 1
for (i in 1:ncol(setmp)) {
A <- rowMeans(assays(setmp)$logCPM)
M <- assays(setmp)$logCPM[, i] - A
samplename <- substr(as.character(setmp$bcr_patient_barcode[i]), 1, 12)
smoothScatter(A, M, main=samplename, sub =numb, las=1)
abline(h=0, col="blue", lwd=2)
lo <- lowess(M ~ A)
lines(lo$x, lo$y, col="red", lwd=2)
numb +1
}
par(mfrow=c(15, 3), mar=c(4, 5, 3, 1))
setmp <- coadse.filt[, coadse.filt$type == "tumor"]
dgetmp <- dge.filt[, coadse.filt$type == "tumor"]
numb <- 1
for (i in 1:ncol(setmp)) {
A <- rowMeans(assays(setmp)$logCPM)
M <- assays(setmp)$logCPM[, i] - A
samplename <- substr(as.character(setmp$bcr_patient_barcode[i]), 1, 12)
smoothScatter(A, M, main= numb + " " + samplename, las=1)
abline(h=0, col="blue", lwd=2)
lo <- lowess(M ~ A)
lines(lo$x, lo$y, col="red", lwd=2)
numb +1
}
par(mfrow=c(15, 3), mar=c(4, 5, 3, 1))
setmp <- coadse.filt[, coadse.filt$type == "tumor"]
dgetmp <- dge.filt[, coadse.filt$type == "tumor"]
numb <- 1
for (i in 1:ncol(setmp)) {
A <- rowMeans(assays(setmp)$logCPM)
M <- assays(setmp)$logCPM[, i] - A
samplename <- substr(as.character(setmp$bcr_patient_barcode[i]), 1, 12)
smoothScatter(A, M, main= string(numb) + " " + samplename, las=1)
abline(h=0, col="blue", lwd=2)
lo <- lowess(M ~ A)
lines(lo$x, lo$y, col="red", lwd=2)
numb +1
}
par(mfrow=c(15, 3), mar=c(4, 5, 3, 1))
setmp <- coadse.filt[, coadse.filt$type == "tumor"]
dgetmp <- dge.filt[, coadse.filt$type == "tumor"]
numb <- 1
for (i in 1:ncol(setmp)) {
A <- rowMeans(assays(setmp)$logCPM)
M <- assays(setmp)$logCPM[, i] - A
samplename <- substr(as.character(setmp$bcr_patient_barcode[i]), 1, 12)
smoothScatter(A, M, main= letters[1] + " " + samplename, las=1)
abline(h=0, col="blue", lwd=2)
lo <- lowess(M ~ A)
lines(lo$x, lo$y, col="red", lwd=2)
numb +1
}
par(mfrow=c(15, 3), mar=c(4, 5, 3, 1))
setmp <- coadse.filt[, coadse.filt$type == "tumor"]
dgetmp <- dge.filt[, coadse.filt$type == "tumor"]
numb <- 1
for (i in 1:ncol(setmp)) {
A <- rowMeans(assays(setmp)$logCPM)
M <- assays(setmp)$logCPM[, i] - A
samplename <- substr(as.character(setmp$bcr_patient_barcode[i]), 1, 12)
smoothScatter(A, M, main= letters[1] + samplename, las=1)
abline(h=0, col="blue", lwd=2)
lo <- lowess(M ~ A)
lines(lo$x, lo$y, col="red", lwd=2)
numb +1
}
par(mfrow=c(15, 3), mar=c(4, 5, 3, 1))
setmp <- coadse.filt[, coadse.filt$type == "tumor"]
dgetmp <- dge.filt[, coadse.filt$type == "tumor"]
numb <- 1
for (i in 1:ncol(setmp)) {
A <- rowMeans(assays(setmp)$logCPM)
M <- assays(setmp)$logCPM[, i] - A
samplename <- substr(as.character(setmp$bcr_patient_barcode[i]), 1, 12)
smoothScatter(A, M, main= letters[numb] samplename, las=1)
par(mfrow=c(15, 3), mar=c(4, 5, 3, 1))
setmp <- coadse.filt[, coadse.filt$type == "tumor"]
dgetmp <- dge.filt[, coadse.filt$type == "tumor"]
numb <- 1
for (i in 1:ncol(setmp)) {
A <- rowMeans(assays(setmp)$logCPM)
M <- assays(setmp)$logCPM[, i] - A
samplename <- substr(as.character(setmp$bcr_patient_barcode[i]), 1, 12)
smoothScatter(A, M, main= letters[numb], sub=samplename, las=1)
abline(h=0, col="blue", lwd=2)
lo <- lowess(M ~ A)
lines(lo$x, lo$y, col="red", lwd=2)
numb +1
}
par(mfrow=c(15, 3), mar=c(4, 5, 3, 1))
setmp <- coadse.filt[, coadse.filt$type == "tumor"]
dgetmp <- dge.filt[, coadse.filt$type == "tumor"]
for (i in 1:ncol(setmp)) {
A <- rowMeans(assays(setmp)$logCPM)
M <- assays(setmp)$logCPM[, i] - A
samplename <- substr(as.character(setmp$bcr_patient_barcode[i]), 1, 12)
smoothScatter(A, M, main= letters[i], sub=samplename, las=1)
abline(h=0, col="blue", lwd=2)
lo <- lowess(M ~ A)
lines(lo$x, lo$y, col="red", lwd=2)
}
par(mfrow=c(15, 3), mar=c(4, 5, 3, 1))
setmp <- coadse.filt[, coadse.filt$type == "tumor"]
dgetmp <- dge.filt[, coadse.filt$type == "tumor"]
for (i in 1:ncol(setmp)) {
A <- rowMeans(assays(setmp)$logCPM)
M <- assays(setmp)$logCPM[, i] - A
samplename <- substr(as.character(setmp$bcr_patient_barcode[i]), 1, 12)
smoothScatter(A, M, main= letters[i], main=samplename, las=1)
abline(h=0, col="blue", lwd=2)
lo <- lowess(M ~ A)
lines(lo$x, lo$y, col="red", lwd=2)
}
par(mfrow=c(15, 3), mar=c(4, 5, 3, 1))
setmp <- coadse.filt[, coadse.filt$type == "tumor"]
dgetmp <- dge.filt[, coadse.filt$type == "tumor"]
for (i in 1:ncol(setmp)) {
A <- rowMeans(assays(setmp)$logCPM)
M <- assays(setmp)$logCPM[, i] - A
samplename <- substr(as.character(setmp$bcr_patient_barcode[i]), 1, 12)
smoothScatter(A, M, main=samplename, las=1)
mtext(labels[i], side = 3, adj = 0.05, line = -1.3)
abline(h=0, col="blue", lwd=2)
lo <- lowess(M ~ A)
lines(lo$x, lo$y, col="red", lwd=2)
}
par(mfrow=c(15, 3), mar=c(4, 5, 3, 1))
setmp <- coadse.filt[, coadse.filt$type == "tumor"]
dgetmp <- dge.filt[, coadse.filt$type == "tumor"]
for (i in 1:ncol(setmp)) {
A <- rowMeans(assays(setmp)$logCPM)
M <- assays(setmp)$logCPM[, i] - A
samplename <- substr(as.character(setmp$bcr_patient_barcode[i]), 1, 12)
smoothScatter(A, M, main= letters[i], sub=samplename, las=1)
abline(h=0, col="blue", lwd=2)
lo <- lowess(M ~ A)
lines(lo$x, lo$y, col="red", lwd=2)
}
par(mfrow=c(15, 3), mar=c(4, 5, 3, 1))
setmp <- coadse.filt[, coadse.filt$type == "tumor"]
dgetmp <- dge.filt[, coadse.filt$type == "tumor"]
lettersext <- c(LETTERS, sapply(LETTERS, function(x) paste0(x, LETTERS)))
for (i in 1:ncol(setmp)) {
A <- rowMeans(assays(setmp)$logCPM)
M <- assays(setmp)$logCPM[, i] - A
samplename <- substr(as.character(setmp$bcr_patient_barcode[i]), 1, 12)
smoothScatter(A, M, xlab= lettersext[i], main=samplename, las=1)
abline(h=0, col="blue", lwd=2)
lo <- lowess(M ~ A)
lines(lo$x, lo$y, col="red", lwd=2)
}
par(mfrow=c(15, 3), mar=c(4, 5, 3, 1))
setmp <- coadse.filt[, coadse.filt$type == "tumor"]
dgetmp <- dge.filt[, coadse.filt$type == "tumor"]
lettersext <- c(LETTERS, sapply(LETTERS, function(x) paste0(x, LETTERS)))
for (i in 1:ncol(setmp)) {
A <- rowMeans(assays(setmp)$logCPM)
M <- assays(setmp)$logCPM[, i] - A
samplename <- substr(as.character(setmp$bcr_patient_barcode[i]), 1, 12)
smoothScatter(A, M, main=paste(lettersext[i], samplename, sep=" ", collapse=NULL), las=1)
abline(h=0, col="blue", lwd=2)
lo <- lowess(M ~ A)
lines(lo$x, lo$y, col="red", lwd=2)
}
par(mfrow=c(15, 3), mar=c(4, 5, 3, 1))
setmp <- coadse.filt[, coadse.filt$type == "tumor"]
dgetmp <- dge.filt[, coadse.filt$type == "tumor"]
lettersext <- c(LETTERS, sapply(LETTERS, function(x) paste0(x, LETTERS)))
for (i in 1:ncol(setmp)) {
A <- rowMeans(assays(setmp)$logCPM)
M <- assays(setmp)$logCPM[, i] - A
samplename <- substr(as.character(setmp$bcr_patient_barcode[i]), 1, 12)
smoothScatter(A, M, main=paste(lettersext[i], samplename, sep=") ", collapse=NULL), las=1)
abline(h=0, col="blue", lwd=2)
lo <- lowess(M ~ A)
lines(lo$x, lo$y, col="red", lwd=2)
}
par(mfrow=c(15, 3), mar=c(4, 5, 3, 1))
setmp <- coadse.filt[, coadse.filt$type == "normal"]
dgetmp <- dge.filt[, coadse.filt$type == "normal"]
for (i in 1:ncol(setmp)) {
A <- rowMeans(assays(setmp)$logCPM)
M <- assays(setmp)$logCPM[, i] - A
samplename <- substr(as.character(setmp$bcr_patient_barcode[i]), 1, 12)
smoothScatter(A, M, main=paste(lettersext[i], samplename, sep=") ", collapse=NULL), las=1)
abline(h=0, col="blue", lwd=2)
lo <- lowess(M ~ A)
lines(lo$x, lo$y, col="red", lwd=2)
}
tss <- substr(colnames(dge.filt), 6, 7)
table(tss)
center <- substr(colnames(dge.filt), 27, 28)
table(center)
samplevial <- substr(colnames(dge.filt), 14, 16)
table(samplevial)
portionanalyte <- substr(colnames(dge.filt), 18, 20)
table(portionanalyte)
plate <- substr(colnames(dge.filt), 22, 25)
table(plate)
table(data.frame(TYPE=coadse.filt$type, TSS=tss))
logCPM <- cpm(dge.paired, log=TRUE, prior.count=3)
d <- as.dist(1-cor(logCPM, method="spearman"))
sampleClustering <- hclust(d)
batch <- as.integer(factor(tss))
sampleDendrogram <- as.dendrogram(sampleClustering, hang=0.1)
names(batch) <- colnames(coadse.filt)
outcome <- paste(substr(colnames(coadse.filt), 9, 12), as.character(coadse.filt$type), sep="-")
names(outcome) <- colnames(coadse.filt)
sampleDendrogram <- dendrapply(sampleDendrogram,
function(x, batch, labels) {
if (is.leaf(x)) {
attr(x, "nodePar") <- list(lab.col=as.vector(batch[attr(x, "label")]))
attr(x, "label") <- as.vector(labels[attr(x, "label")])
}
x
}, batch, outcome)
plot(sampleDendrogram, main="Hierarchical clustering of samples")
legend("topright", paste("Batch", sort(unique(batch)), levels(factor(tss))), fill=sort(unique(batch)))
plotMDS(dge.paired, labels=outcome, col=batch)
legend("bottomleft", paste("Batch", sort(unique(batch)), levels(factor(tss))),
fill=sort(unique(batch)), inset=0.05)
library(knitr)
library(SummarizedExperiment)
library(edgeR)
library(geneplotter)
library(sva)
library(limma)
library(calibrate)
library(EnhancedVolcano)
opts_chunk$set(cache=TRUE,
cache.path="cache/file2",
cache.extra=R.version.string,
autodep=TRUE,
fig.align="center",
comment="")
coadse <- readRDS(file.path("rawCounts", "seCOAD.rds"))
dge <- readRDS(file.path("results", "dge.rds"))
coadse.filt.unnorm <- readRDS(file.path("results", "coadse.filt.unnorm.rds"))
dge.filt.unnorm <- readRDS(file.path("results", "dge.filt.unnorm.rds"))
coadse.filt <- readRDS(file.path("results", "coadse.filt.rds"))
dge.filt <- readRDS(file.path("results", "dge.filt.rds"))
pid <- substr(colnames(dge.filt), 9, 12)
mod <- model.matrix(~ type + pid, colData(coadse.filt))
mod0 <- model.matrix(~pid, colData(coadse.filt))
#Verify wether is full rank --> yes!
is.fullrank(mod)
pv <- f.pvalue(assays(coadse.filt)$logCPM, mod, mod0)
sum(p.adjust(pv, method="fdr") < 0.01)
hist(pv, main="", las=1, xlab="P-value")
sv <- sva(assays(coadse.filt)$logCPM, mod, mod0)
sv$n
modsv <- cbind(mod, sv$sv)
mod0sv <- cbind(mod0, sv$sv)
pvsv <- f.pvalue(assays(coadse.filt)$logCPM, modsv, mod0sv)
sum(p.adjust(pvsv, method="fdr") < 0.01)
hist(pvsv, main="", las=1, xlab = "P-value")
barplot(sort(dge.filt$samples$lib.size)/1e+06, xlab = "Samples", ylab = "Library sizes (Millions)")
v <- voom(dge.filt, modsv, plot=TRUE)
# Fit linear model for each gene given a series of arrays
fit<- lmFit(v,modsv)
# compute moderated t-statistics, moderated F-statistic, and log-odds of differential expression by empirical Bayes moderation of the standard errors towards a common value.
fit <- eBayes(fit)
FDRcutoff <- 0.01
#Classify a series of related t-statistics as up, down or not significant.
res <- decideTests(fit, p.value = FDRcutoff)
summary(res)
genesmd <- data.frame(chr = as.character(sub("\\_.*", "", seqnames(rowRanges(coadse.filt)))), symbol = rowData(coadse.filt)[, 1], stringsAsFactors = FALSE)
unique(genesmd$chr)
#Extract a table of the top-ranked genes from a linear model fit.
tt <- topTable(fit, coef = 2, n = Inf)
fit$genes <- genesmd
sort(table(tt$chr[tt$adj.P.Val < FDRcutoff]), decreasing = TRUE)
?decideTests
DEgenes <- rownames(tt)[tt$adj.P.Val < FDRcutoff]
length(DEgenes)
EnhancedVolcano(tt,
lab = tt$symbol,
x = 'logFC',
y = 'adj.P.Val',
xlim = c(-8, 8),
title = 'Volcano Plot',
pCutoff = 10e-16,
FCcutoff = 3,
transcriptPointSize = 1.0,
transcriptLabSize = 3.0)
sessionInfo()
library(knitr)
library(SummarizedExperiment)
library(edgeR)
library(geneplotter)
library(GOstats)
library(xtable)
library(org.Hs.eg.db)
library(GSVAdata)
opts_chunk$set(cache=TRUE,
cache.path="cache/file2",
cache.extra=R.version.string,
autodep=TRUE,
fig.align="center",
comment="")
se <- readRDS(file.path("rawCounts", "seCOAD.rds"))
dge <- readRDS(file.path("results", "dge.rds"))
se.filt.unnorm <- readRDS(file.path("results", "coadse.filt.unnorm.rds"))
dge.filt.unnorm <- readRDS(file.path("results", "dge.filt.unnorm.rds"))
se.filt <- readRDS(file.path("results", "coadse.filt.rds"))
dge.filt <- readRDS(file.path("results", "dge.filt.rds"))
geneUniverse <- rownames(coadse.filt)
# Build a parameter object : information about gene universe, DEgenes and the annotation package to use.
params <- new("GOHyperGParams", geneIds=DEgenes, universeGeneIds=geneUniverse,annotation="org.Hs.eg.db", ontology="BP", pvalueCutoff=0.05, testDirection="over")
conditional(params) <- TRUE
# Run the functional enrichment analysis
hgOver <- hyperGTest(params)
hgOver
# Store and visualize
htmlReport(hgOver, file = "gotests.html")
browseURL("gotests.html")
# store the results in a dataframe
goresults <- summary(hgOver)
# exploring
head(summary(hgOver))
head(geneCounts(hgOver))
head(universeCounts(hgOver))
head(pvalues(hgOver))
goresults <- goresults[goresults$Size >= 3 & goresults$Size <= 300 & goresults$Count >= 3, ]
goresults <- goresults[order(goresults$OddsRatio, decreasing=TRUE), ]
head(goresults)
geneIDs <- geneIdsByCategory(hgOver)[goresults$GOBPID]
geneSYMs <- sapply(geneIDs, function(id) AnnotationDbi::select(org.Hs.eg.db, columns = "SYMBOL", key = id, keytype ="ENTREZID")$SYMBOL)
geneSYMs <- sapply(geneSYMs, paste, collapse = ", ")
goresults <- cbind(goresults, Genes = geneSYMs)
rownames(goresults) <- 1:nrow(goresults)
xtab <- xtable(goresults, align = "l|c|r|r|r|r|r|p{3cm}|p{3cm}|")
print(xtab, file = "goresults.html", type = "html")
browseURL("goresults.html")
# collect gene sets
data(c2BroadSets)
c2BroadSets <- c2BroadSets[c(grep("^KEGG", names(c2BroadSets)))]
#c2BroadSets <- c2BroadSets[c(grep("^KEGG", names(c2BroadSets)),grep("^REACTOME", names(c2BroadSets)), grep("^BIOCARTA", names(c2BroadSets)))]
gsc <- GeneSetCollection(c2BroadSets)
gsc
gsc <- mapIdentifiers(gsc, AnnoOrEntrezIdentifier(metadata(coadse.filt)$annotation))
# remove genes which are not annotated to any geneset
Im <- incidence(gsc)
dim(Im)
Im <- Im[, colnames(Im) %in% rownames(coadse.filt)]
dim(Im)
coadse.filt <- coadse.filt[colnames(Im), ]
dim(coadse.filt)
dge.filt <- dge.filt[colnames(Im),]
dim(dge.filt)
# ehm ... not normal at all
qq <- qqnorm(tt$t)
abline(0,1)
chroutliers <- tt$chr[abs(tt$t) > 10]
text(qq$x[abs(qq$y) > 10], qq$y[abs(qq$y) > 10], chroutliers, pos = 4)
Im <- Im[rowSums(Im) >= 10, ]
dim(Im)
tGSgenes <- tt[match(colnames(Im), rownames(tt)), "t"]
length(tGSgenes)
zS <- sqrt(rowSums(Im)) * (as.vector(Im %*% tGSgenes)/rowSums(Im))
length(zS)
qqnorm(zS)
abline(0,1)
rnkGS <- sort(abs(zS), decreasing = TRUE)
head(rnkGS)
pv <- pmin(pnorm(zS), 1 - pnorm(zS))
sum(pv < 0.05)
pvadj <- p.adjust(pv, method = "fdr")
DEgs <- names(pvadj)[which(pvadj < 0.01)]
length(DEgs)
head(DEgs, n = 3)
library(GSVA)
gsov <- computeGeneSetsOverlap(gsc[DEgs], rownames(coadse.filt))
trimask <- upper.tri(gsov)
rnkOv <- data.frame(gs1 = row(gsov)[trimask], gs2 = col(gsov)[trimask], ov = gsov[trimask])
rnkOv <- rnkOv[order(rnkOv$ov, decreasing = TRUE), ]
rnkOv$gs1 <- rownames(gsov)[rnkOv$gs1]
rnkOv$gs2 <- rownames(gsov)[rnkOv$gs2]
## how many pairs of gene sets are identical?
sum(rnkOv$ov == 1)
## how many pairs of gene sets share less than 5% of the genes?
sum(rnkOv$ov < 0.05)
library(Category)
xS <- applyByCategory(tGSgenes, Im, function(x) (sum((x - mean(x))^2) - (length(x) - 1))/(2 *
(length(x) - 1)))
rnkGS <- sort(abs(xS), decreasing = TRUE)
pv <- pmin(pnorm(xS), 1 - pnorm(xS))
pvadj <- p.adjust(pv)
DEgsByScale <- names(pvadj)[which(pvadj < 0.01)]
length(DEgsByScale)
length(intersect(DEgs, DEgsByScale))
setdiff(DEgsByScale, DEgs)
topgs1genes <- colnames(Im)[which(Im[names(rnkGS)[1], ] == 1)]
topgs2genes <- colnames(Im)[which(Im[names(rnkGS)[2], ] == 1)]
topgs3genes <- colnames(Im)[which(Im[names(rnkGS)[3], ] == 1)]
par(mfrow = c(1, 3))
plotGS <- function(se, gs, pheno, ...) {
l <- levels(colData(se)[, pheno])
idxSamples1 <- colData(se)[, pheno] == l[1]
idxSamples2 <- colData(se)[, pheno] == l[2]
exps1 <- rowMeans(assays(se)$logCPM[gs, idxSamples1])
exps2 <- rowMeans(assays(se)$logCPM[gs, idxSamples2])
rng <- range(c(exps1, exps2))
plot(exps1, exps2, pch = 21, col = "black", bg = "black", xlim = rng, ylim = rng,
xlab = l[1], ylab = l[2], ...)
abline(a = 0, b = 1, lwd = 2, col = "red")
}
plotGS(coadse.filt, topgs1genes, "type", main = names(rnkGS)[1], cex.lab = 2, las = 1)
plotGS(coadse.filt, topgs2genes, "type", main = names(rnkGS)[2], cex.lab = 2, las = 1)
plotGS(coadse.filt, topgs3genes, "type", main = names(rnkGS)[3], cex.lab = 2, las = 1)
library(GSVA)
GSexpr <- gsva(assays(lclse)$logCPM, gsc,
min.sz=5, max.sz=300, verbose=FALSE)
library(GSVA)
GSexpr <- gsva(assays(coadse.filt)$logCPM, gsc,
min.sz=5, max.sz=300, verbose=FALSE)
class(GSexpr)
dim(GSexpr)
svaobj <- sva(GSexpr, mod, mod0)
modSVs <- cbind(mod, svaobj$sv)
corfit <- duplicateCorrelation(GSexpr, modSVs) ## blocking variable??
fit <- lmFit(GSexpr, modSVs, correlation = corfit$consensus)
fit <- eBayes(fit)
tt <- topTable(fit, coef = 2, n = Inf)
DEgs <- rownames(tt[tt$adj.P.Val < 0.01, , drop = FALSE])
DEgs
svaobj <- sva(GSexpr, mod, mod0)
modSVs <- cbind(mod, svaobj$sv)
corfit <- duplicateCorrelation(GSexpr, modSVs, block = coadse.filt$type) ## blocking variable??
fit <- lmFit(GSexpr, modSVs, correlation = corfit$consensus, block = coadse.filt$type)
svaobj <- sva(GSexpr, mod, mod0)
modSVs <- cbind(mod, svaobj$sv)
corfit <- duplicateCorrelation(GSexpr, modSVs, block = coadse.filt$bcr_patient_barcode) ## blocking variable??
fit <- lmFit(GSexpr, modSVs, correlation = corfit$consensus, block = coadse.filt$bcr_patient_barcode)
par(mfrow = c(1, 2))
boxplot(GSexpr["KEGG_ADIPOCYTOKINE_SIGNALING_PATHWAY", ] ~ coadse.filt$type, main = "KEGG_ADIPOCYTOKINE_SIGNALING_PATHWAY", las = 1, cex.axis = 2)
boxplot(GSexpr["KEGG_LONG_TERM_POTENTIATION", ] ~ coadse.filt$type, main = "KEGG_LONG_TERM_POTENTIATION", las = 1, cex.axis = 2)
#par(mfrow = c(1, 2))
boxplot(GSexpr["KEGG_ADIPOCYTOKINE_SIGNALING_PATHWAY", ] ~ coadse.filt$type, main = "KEGG_ADIPOCYTOKINE_SIGNALING_PATHWAY", las = 1, cex.axis = 2)
boxplot(GSexpr["KEGG_LONG_TERM_POTENTIATION", ] ~ coadse.filt$type, main = "KEGG_LONG_TERM_POTENTIATION", las = 1, cex.axis = 2)
plot(tt$logFC, -log10(tt$P.Value), xlab="Log2 fold-change", ylab="-log10 P-value",
pch=".", cex=5, col=grey(0.75), cex.axis=1.2, cex.lab=1.5, las=1)
posx <- tt[tt$adj.P.Val < 0.01, "logFC"] ; posy <- -log10(tt[tt$adj.P.Val < 0.01, "P.Value"])
points(posx, posy, pch=".", cex=5, col="red")
text(posx, posy, rownames(tt)[tt$adj.P.Val < 0.01], pos=1)
```{r}
plot(tt$logFC, -log10(tt$P.Value), xlab="Log2 fold-change", ylab="-log10 P-value",
pch=".", cex=5, col=grey(0.75), cex.axis=1.2, cex.lab=1.5, las=1)
posx <- tt[tt$adj.P.Val < 0.01, "logFC"] ; posy <- -log10(tt[tt$adj.P.Val < 0.01, "P.Value"])
points(posx, posy, pch=".", cex=5, col="red")
text(posx, posy, rownames(tt)[tt$adj.P.Val < 0.01], pos=1)
```
plot(tt$logFC, -log10(tt$P.Value), xlab="Log2 fold-change", ylab="-log10 P-value",
pch=".", cex=5, col=grey(0.75), cex.axis=1.2, cex.lab=1.5, las=1)
posx <- tt[tt$adj.P.Val < 0.01, "logFC"] ; posy <- -log10(tt[tt$adj.P.Val < 0.01, "P.Value"])
points(posx, posy, pch=".", cex=5, col="red")
text(posx, posy, rownames(tt)[tt$adj.P.Val < 0.01], pos=1)
plot(tt$logFC, -log10(tt$P.Value), xlab="Log2 fold-change", ylab="-log10 P-value",
pch=".", cex=5, col=grey(0.75), cex.axis=1.2, cex.lab=1.5, las=1)
posx <- tt[tt$adj.P.Val < 0.01, "logFC"] ; posy <- -log10(tt[tt$adj.P.Val < 0.01, "P.Value"])
points(posx, posy, pch=".", cex=5, col="red")
text(posx, posy, rownames(tt)[tt$adj.P.Val < 0.01], pos=1)
plot(tt$logFC, -log10(tt$P.Value), xlab="Log2 fold-change", ylab="-log10 P-value",
pch=".", cex=5, col=grey(0.75), cex.axis=1.2, cex.lab=1.5, las=1)
posx <- tt[tt$adj.P.Val < 0.01, "logFC"] ; posy <- -log10(tt[tt$adj.P.Val < 0.01, "P.Value"])
points(posx, posy, pch=".", cex=5, col="red")
text(posx, posy, rownames(tt)[tt$adj.P.Val < 0.01], pos=1)
svaobj <- sva(GSexpr, mod, mod0)
modSVs <- cbind(mod, svaobj$sv)
corfit <- duplicateCorrelation(GSexpr, modSVs) ## blocking variable??
fit <- lmFit(GSexpr, modSVs, correlation = corfit$consensus)
fit <- eBayes(fit)
tt <- topTable(fit, coef = 2, n = Inf)
DEgs <- rownames(tt[tt$adj.P.Val < 0.01, , drop = FALSE])
DEgs
dim(DEgs)
svaobj <- sva(GSexpr, mod, mod0)
modSVs <- cbind(mod, svaobj$sv)
corfit <- duplicateCorrelation(GSexpr, modSVs) ## blocking variable??
fit <- lmFit(GSexpr, modSVs, correlation = corfit$consensus)
fit <- eBayes(fit)
tt <- topTable(fit, coef = 2, n = Inf)
DEgs <- rownames(tt[tt$adj.P.Val < 0.01, , drop = FALSE])
DEgs
table(DEgs)
svaobj <- sva(GSexpr, mod, mod0)
modSVs <- cbind(mod, svaobj$sv)
corfit <- duplicateCorrelation(GSexpr, modSVs) ## blocking variable??
fit <- lmFit(GSexpr, modSVs, correlation = corfit$consensus)
fit <- eBayes(fit)
tt <- topTable(fit, coef = 2, n = Inf)
DEgs <- rownames(tt[tt$adj.P.Val < 0.01, , drop = FALSE])
DEgs
library(knitr)
opts_chunk$set(cache=TRUE,
cache.path="cache/QA",
cache.extra=R.version.string,
autodep=TRUE,
fig.align="center",
comment="")
library(SummarizedExperiment)
coadse <- readRDS(file.path("rawCounts", "seCOAD.rds"))
coadse
